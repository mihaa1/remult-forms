import { type RelationFields } from '../src/remult3/relationInfoMember.js';
import type { ClassType } from '../classType.js';
import type { Remult } from '../src/context.js';
import { EntityFilter } from '../src/remult3/remult3.js';
export interface EntityUIInfo {
    key: string;
    caption: string;
    fields: FieldUIInfo[];
    ids: Record<string, true>;
    relations: EntityRelationToManyInfo[];
    defaultOrderBy?: EntityFilter<any>;
    color?: string;
}
export interface EntityRelationToManyInfo extends RelationFields {
    entityKey: string;
    where?: any;
}
export type FieldUIInfoType = 'json' | 'string' | 'number' | 'date' | 'boolean';
export interface FieldUIInfo {
    key: string;
    readOnly: boolean;
    values: {
        id: string | number;
        caption: string;
    }[];
    valFieldKey: string;
    caption: string;
    type: FieldUIInfoType;
    inputType: string;
    relationToOne?: FieldRelationToOneInfo;
}
export interface FieldRelationToOneInfo extends RelationFields {
    entityKey: string;
    idField: string;
    captionField: string;
    where?: any;
}
export interface AdminOptions extends DisplayOptions {
    entities: ClassType<any>[];
    remult: Remult;
}
export interface DisplayOptions {
    baseUrl?: string;
}
export default function remultAdminHtml(options: AdminOptions): string;
export declare function buildEntityInfo(options: AdminOptions): EntityUIInfo[];
export type RelationsToOneValues = Record<string, Map<any, any>>;
