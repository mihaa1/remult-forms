import type { ClassType } from '../../classType.js';
import { LookupColumn } from '../column.js';
import type { FieldMetadata, FieldOptions, ValueConverter, ValueListItem } from '../column-interfaces.js';
import { Remult } from '../context.js';
import type { EntityOptions } from '../entity.js';
import { Filter } from '../filter/filter-interfaces.js';
import { type GroupByOptions, type GroupByResult, type ControllerRef, type ControllerRefForControllerBase, type EntityFilter, type EntityMetadata, type EntityOrderBy, type EntityRef, type EntityRefForEntityBase, type FieldRef, type FieldsMetadata, type FieldsRef, type FieldsRefForEntityBase, type FindFirstOptions, type FindFirstOptionsBase, type FindOptions, type IdMetadata, type LiveQuery, type LoadOptions, type MembersOnly, type NumericKeys, type Repository, type RepositoryRelations, type Subscribable, type idType } from './remult3.js';
import type { QueryOptions, RefSubscriber, UpsertOptions } from './remult3.js';
import type { entityEventListener } from '../__EntityValueProvider.js';
import { type DataProvider, type EntityDataProvider, type EntityDataProviderGroupByOptions, type EntityDataProviderFindOptions, type ErrorInfo, EntityError } from '../data-interfaces.js';
import type { Unsubscribe } from '../live-query/SubscriptionChannel.js';
import { RelationLoader } from './relation-loader.js';
import { type RepositoryInternal, getInternalKey } from './repository-internals.js';
export declare class RepositoryImplementation<entityType> implements Repository<entityType>, RepositoryInternal<entityType> {
    private _entity;
    _remult: Remult;
    _dataProvider: DataProvider;
    private _info;
    private _defaultFindOptions?;
    _notFoundError(id: any): {
        message: string;
        httpStatusCode: number;
    };
    [getInternalKey](): this;
    _createAfterFilter(orderBy: EntityOrderBy<entityType>, lastRow: entityType): Promise<EntityFilter<entityType>>;
    relations(item: entityType): RepositoryRelations<entityType>;
    _getFocusedRelationRepo(field: FieldMetadata, item: entityType): {
        toRepo: RepositoryImplementation<any>;
        returnNull: boolean;
        returnUndefined: boolean;
    };
    private __edp?;
    get _edp(): EntityDataProvider;
    constructor(_entity: ClassType<entityType>, _remult: Remult, _dataProvider: DataProvider, _info: EntityFullInfo<entityType>, _defaultFindOptions?: FindOptions<entityType> | undefined);
    aggregate<sumFields extends NumericKeys<entityType>[] | undefined = undefined, averageFields extends NumericKeys<entityType>[] | undefined = undefined, minFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined, maxFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined, distinctCountFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined>(options: Omit<GroupByOptions<entityType, never, sumFields extends undefined ? never : sumFields, averageFields extends undefined ? never : averageFields, minFields extends undefined ? never : minFields, maxFields extends undefined ? never : maxFields, distinctCountFields extends undefined ? never : distinctCountFields>, 'limit' | 'page' | 'orderBy'>): Promise<GroupByResult<entityType, never, sumFields extends undefined ? never : sumFields, averageFields extends undefined ? never : averageFields, minFields extends undefined ? never : minFields, maxFields extends undefined ? never : maxFields, distinctCountFields extends undefined ? never : distinctCountFields>>;
    groupBy<groupByFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined, sumFields extends NumericKeys<entityType>[] | undefined = undefined, averageFields extends NumericKeys<entityType>[] | undefined = undefined, minFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined, maxFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined, distinctCountFields extends (keyof MembersOnly<entityType>)[] | undefined = undefined>(options: GroupByOptions<entityType, groupByFields extends undefined ? never : groupByFields, sumFields extends undefined ? never : sumFields, averageFields extends undefined ? never : averageFields, minFields extends undefined ? never : minFields, maxFields extends undefined ? never : maxFields, distinctCountFields extends undefined ? never : distinctCountFields>): Promise<GroupByResult<entityType, groupByFields extends undefined ? never : groupByFields, sumFields extends undefined ? never : sumFields, averageFields extends undefined ? never : averageFields, minFields extends undefined ? never : minFields, maxFields extends undefined ? never : maxFields, distinctCountFields extends undefined ? never : distinctCountFields>[]>;
    __buildGroupByOptions(options: GroupByOptions<entityType, any, any, any, any, any, any>): Promise<EntityDataProviderGroupByOptions>;
    _idCache: Map<any, any>;
    _getCachedById(id: any, doNotLoadIfNotFound: boolean): entityType | undefined;
    _getCachedByIdAsync(id: any, doNotLoadIfNotFound: boolean): Promise<entityType | undefined>;
    _addToCache(item: entityType): void;
    get metadata(): EntityMetadata<entityType>;
    listeners?: entityEventListener<entityType>[];
    addEventListener(listener: entityEventListener<entityType>): () => void;
    query<Options extends QueryOptions<entityType> & {
        aggregate?: Omit<GroupByOptions<entityType, never, NumericKeys<entityType>[], NumericKeys<entityType>[], (keyof MembersOnly<entityType>)[], (keyof MembersOnly<entityType>)[], (keyof MembersOnly<entityType>)[]>, 'group' | 'orderBy' | 'where' | 'limit' | 'page'>;
    }>(options?: Options): any;
    getEntityRef(entity: entityType): EntityRef<entityType>;
    delete(id: idType<entityType>): Promise<void>;
    delete(item: Partial<MembersOnly<entityType>>): Promise<void>;
    __cleanupPartialObject(item: Partial<MembersOnly<entityType>>): void;
    insert(item: Partial<MembersOnly<entityType>>[]): Promise<entityType[]>;
    insert(item: Partial<MembersOnly<entityType>>): Promise<entityType>;
    get fields(): FieldsMetadata<entityType>;
    validate(entity: Partial<MembersOnly<entityType>>, ...fields: Extract<keyof MembersOnly<entityType>, string>[]): Promise<ErrorInfo<entityType> | undefined>;
    private __createDto;
    updateMany({ where, set, }: {
        where: EntityFilter<entityType>;
        set: Partial<MembersOnly<entityType>>;
    }): Promise<number>;
    update(id: idType<entityType>, item: Partial<MembersOnly<entityType>>): Promise<entityType>;
    update(originalItem: Partial<MembersOnly<entityType>>, item: Partial<MembersOnly<entityType>>): Promise<entityType>;
    upsert(options: UpsertOptions<entityType>[]): Promise<entityType[]>;
    upsert(options: UpsertOptions<entityType>): Promise<entityType>;
    private _getRefForExistingRow;
    save(item: Partial<MembersOnly<entityType>>[]): Promise<entityType[]>;
    save(item: Partial<MembersOnly<entityType>>): Promise<entityType>;
    liveQuery(options?: FindOptions<entityType>): LiveQuery<entityType>;
    _rawFind(options: FindOptions<entityType> | undefined, skipOrderByAndLimit: boolean | undefined, loader: RelationLoader, actualFind: (ops: EntityDataProviderFindOptions) => Promise<any[]>): Promise<entityType[]>;
    find(options?: FindOptions<entityType>): Promise<entityType[]>;
    find(options?: FindOptions<entityType>, skipOrderByAndLimit?: boolean): Promise<entityType[]>;
    _buildEntityDataProviderFindOptions(options: FindOptions<entityType>): Promise<EntityDataProviderFindOptions>;
    _fromJsonArray(jsonItems: any[], loadOptions: LoadOptions<entityType>): Promise<entityType[]>;
    private _loadManyToOneForManyRows;
    private _populateRelationsForFields;
    private __getRelationAndInclude;
    private _mapRawDataToResult;
    toJson(item: entityType | entityType[] | Promise<entityType> | Promise<entityType[]>): any;
    fromJson(x: any[], isNew?: boolean): entityType[];
    fromJson(x: any, isNew?: boolean): entityType;
    count(where?: EntityFilter<entityType>): Promise<number>;
    deleteMany({ where, }: {
        where: EntityFilter<entityType>;
    }): Promise<number>;
    private _cache;
    findOne(pOptions?: FindFirstOptions<entityType>, skipOrderByAndLimit?: boolean): Promise<entityType | undefined>;
    findFirst(where?: EntityFilter<entityType>, options?: FindFirstOptions<entityType>, skipOrderByAndLimit?: boolean): Promise<entityType | undefined>;
    private _fieldsOf;
    create(item?: Partial<MembersOnly<entityType>>): entityType;
    _fixTypes(item: any): Promise<any>;
    findId(id: any, options?: FindFirstOptionsBase<entityType>): Promise<entityType | undefined | null>;
    _translateWhereToFilter(where?: EntityFilter<entityType>): Promise<Filter>;
}
export type EntityOptionsFactory = (remult: Remult) => EntityOptions;
export declare function createOldEntity<T>(entity: ClassType<T>, remult: Remult): EntityFullInfo<T>;
declare abstract class rowHelperBase<T> {
    protected fieldsMetadata: FieldMetadata[];
    instance: T;
    remult: Remult;
    isNewRow: boolean;
    _error?: string;
    get error(): string | undefined;
    set error(val: string | undefined);
    constructor(fieldsMetadata: FieldMetadata[], instance: T, remult: Remult, isNewRow: boolean, excludeRelationMembers?: Set<string>);
    _subscribers?: SubscribableImp;
    subscribe(listener: RefSubscriber): Unsubscribe;
    _isLoading: boolean;
    initSubscribers(): void;
    get isLoading(): boolean;
    set isLoading(val: boolean);
    lookups: Map<string, LookupColumn<any>>;
    waitLoad(): Promise<void>;
    errors?: {
        [key: string]: string | undefined;
    };
    protected __assertValidity(): void;
    buildErrorInfoObject(): EntityError<unknown>;
    abstract get fields(): FieldsRef<T>;
    catchSaveErrors(err: any): any;
    __clearErrorsAndReportChanged(): void;
    _reportChangedToEntityAndFields(): void;
    hasErrors(): boolean;
    copyDataToObject(isNew?: boolean): any;
    originalValues: any;
    saveOriginalData(): void;
    saveMoreOriginalData(): void;
    validate(): Promise<EntityError<unknown> | undefined>;
    __validateEntity(): Promise<void>;
    __performColumnAndEntityValidations(): Promise<void>;
    toApiJson(includeRelatedEntities?: boolean, notJustApi?: boolean): any;
    _updateEntityBasedOnApi(body: any, ignoreApiAllowed?: boolean): Promise<void>;
}
export declare class rowHelperImplementation<T> extends rowHelperBase<T> implements EntityRef<T> {
    private info;
    private repo;
    private edp;
    private _isNew;
    constructor(info: EntityFullInfo<T>, instance: T, repo: RepositoryImplementation<T>, edp: EntityDataProvider, remult: Remult, _isNew: boolean, excludeRelationMembers?: Set<string>);
    repository: Repository<unknown>;
    clone(): T;
    get relations(): RepositoryRelations<T>;
    get apiUpdateAllowed(): boolean;
    get apiDeleteAllowed(): boolean;
    get apiInsertAllowed(): boolean;
    metadata: EntityMetadata<T>;
    getId(): any;
    saveMoreOriginalData(): void;
    private _wasDeleted;
    wasDeleted(): boolean;
    undoChanges(): void;
    reload(): Promise<T>;
    private _columns?;
    get fields(): FieldsRef<T>;
    private _saving;
    save(onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject?: string[]): Promise<T>;
    processInsertResponseDto(updatedRow: any): Promise<T>;
    buildDtoForInsert(): Promise<any>;
    private buildLifeCycleEvent;
    private getIdFilter;
    delete(): Promise<void>;
    loadDataFrom(data: any, loadItems?: FieldMetadata[]): Promise<void>;
    id?: any;
    originalId?: any;
    getOriginalId(): any;
    private calcServerExpression;
    isNew(): boolean;
    wasChanged(): boolean;
    __performColumnAndEntityValidations(): Promise<void>;
}
export declare function getFields<fieldsContainerType>(container: fieldsContainerType, remult?: Remult): FieldsRef<fieldsContainerType>;
export declare function getControllerRef<fieldsContainerType>(container: fieldsContainerType, remultArg?: Remult): ControllerRef<fieldsContainerType>;
export declare class controllerRefImpl<T = unknown> extends rowHelperBase<T> implements ControllerRef<T> {
    constructor(columnsInfo: FieldMetadata[], instance: any, remult: Remult);
    __performColumnAndEntityValidations(): Promise<void>;
    fields: FieldsRef<T>;
}
export declare class FieldRefImplementation<entityType, valueType> implements FieldRef<entityType, valueType> {
    private settings;
    metadata: FieldMetadata<valueType, entityType>;
    container: any;
    private helper;
    private rowBase;
    constructor(settings: FieldOptions, metadata: FieldMetadata<valueType, entityType>, container: any, helper: EntityRef<entityType> | undefined, rowBase: rowHelperBase<entityType>);
    _subscribers?: SubscribableImp;
    subscribe(listener: RefSubscriber): Unsubscribe;
    valueIsNull(): boolean;
    originalValueIsNull(): boolean;
    get key(): keyof entityType;
    get repo(): Repository<entityType>;
    load(): Promise<valueType>;
    target?: ClassType<any>;
    reportObserved(): void;
    reportChanged(): void;
    get error(): string | undefined;
    set error(error: string | undefined);
    get displayValue(): string;
    get value(): any;
    set value(value: any);
    get originalValue(): any;
    private rawOriginalValue;
    setId(id: string | number): void;
    getId(): any;
    get inputValue(): string;
    set inputValue(val: string);
    valueChanged(): boolean;
    entityRef: EntityRef<entityType>;
    __performValidation(): Promise<void>;
    validate(): Promise<boolean>;
}
export declare const fieldOptionsEnricher: {
    enrichFieldOptions: (options: FieldOptions) => void;
};
export declare const CaptionTransformer: {
    /**
     * Transforms the caption of a column based on custom rules or criteria.
     *
     * This method can be assigned an arrow function that dynamically alters the
     * caption of a column. It is particularly useful for internationalization,
     * applying specific labeling conventions, or any other custom caption transformation
     * logic that your application requires.
     *
     * @param {Remult} remult - The Remult context, providing access to various framework features.
     * @param {string} key - The key (name) of the field whose caption is being transformed.
     * @param {string} caption - The original caption of the field.
     * @param {EntityMetadata<any>} entityMetaData - Metadata of the entity that the field belongs to.
     * @returns {string} The transformed caption for the field. If no transformation is applied,
     *                   the original caption is returned.
     *
     * @example
     * // Example of translating a field caption to French
     * CaptionTransformer.transformCaption = (
     *   remult, key, caption, entityMetaData
     * ) => {
     *   if (key === 'firstName') {
     *     return 'Prénom'; // French translation for 'firstName'
     *   }
     *   return caption;
     * };
     *
     * // Usage
     * const firstNameCaption = repo(Person).fields.firstName.caption; // Returns 'Prénom'
     */
    transformCaption: (remult: Remult, key: string, caption: string, entityMetaData: EntityMetadata<any>) => string;
};
export declare function buildCaption(caption: string | ((remult: Remult) => string) | undefined, key: string, remult: Remult, metaData: EntityMetadata<any>): string;
export declare class columnDefsImpl implements FieldMetadata {
    private settings;
    private entityDefs;
    private remult;
    constructor(settings: FieldOptions<unknown, unknown>, entityDefs: EntityFullInfo<any>, remult: Remult);
    apiUpdateAllowed(item?: any): boolean;
    displayValue(item: any): string;
    includedInApi(item?: any): boolean;
    toInput(value: any, inputType?: string): string;
    fromInput(inputValue: string, inputType?: string): any;
    getDbName(): Promise<string>;
    options: FieldOptions<unknown, unknown>;
    target: ClassType<any>;
    readonly: boolean;
    valueConverter: Required<ValueConverter<any>>;
    allowNull: boolean;
    caption: string;
    dbName: string;
    inputType: string;
    key: string;
    get dbReadOnly(): boolean;
    isServerExpression: boolean;
    valueType: any;
}
declare class EntityFullInfo<T> implements EntityMetadata<T> {
    entityInfo: EntityOptions<T>;
    private remult;
    readonly entityType: ClassType<T>;
    readonly key: string;
    options: EntityOptions<unknown>;
    fieldsMetadata: FieldMetadata[];
    constructor(columnsInfo: FieldOptions<unknown, unknown>[], entityInfo: EntityOptions<T>, remult: Remult, entityType: ClassType<T>, key: string);
    apiUpdateAllowed(item: T): boolean;
    get apiReadAllowed(): boolean;
    apiDeleteAllowed(item: T): boolean;
    apiInsertAllowed(item: T): boolean;
    getEntityMetadataWithoutBreakingTheEntity(item: T): EntityRef<T>;
    getDbName(): Promise<string>;
    idMetadata: IdMetadata<T>;
    fields: FieldsMetadata<T>;
    dbName: string;
    caption: string;
}
export declare function FieldType<valueType = unknown>(...options: (FieldOptions<any, valueType> | ((options: FieldOptions<any, valueType>, remult: Remult) => void))[]): (target: any, context?: any) => any;
export declare function isAutoIncrement(f: FieldMetadata): boolean;
export declare function ValueListFieldType<valueType extends ValueListItem = ValueListItem>(...options: (ValueListFieldOptions<any, valueType> | ((options: FieldOptions<any, valueType>, remult: Remult) => void))[]): (type: ClassType<valueType>, context?: any) => void;
export interface ValueListFieldOptions<entityType, valueType> extends FieldOptions<entityType, valueType> {
    getValues?: () => valueType[];
}
export declare class ValueListInfo<T extends ValueListItem> implements ValueConverter<T> {
    private valueListType;
    static get<T extends ValueListItem>(type: ClassType<T>): ValueListInfo<T>;
    private byIdMap;
    private values;
    isNumeric: boolean;
    private constructor();
    getValues(): T[];
    byId(key: any): T | undefined;
    fromJson(val: any): T;
    toJson(val: T): any;
    fromDb(val: any): T;
    toDb(val: T): any;
    toInput(val: T, inputType: string): string;
    fromInput(val: string, inputType: string): T;
    displayValue?(val: T): string;
    fieldTypeInDb?: string;
    inputType?: string;
}
export declare function getValueList<T>(field: FieldRef<T>): T[];
export declare function getValueList<T>(field: FieldMetadata<T>): T[];
export declare function getValueList<T>(type: ClassType<T>): T[];
export declare const storableMember: unique symbol;
export declare const fieldOptionalValuesFunctionKey: unique symbol;
export declare function buildOptions<entityType = unknown, valueType = unknown>(options: (FieldOptions<entityType, valueType> | ((options: FieldOptions<entityType, valueType>, remult: Remult) => void))[], remult: Remult): FieldOptions<entityType, valueType>;
export declare function decorateColumnSettings<valueType>(settings: FieldOptions<unknown, valueType>, remult: Remult): FieldOptions<unknown, valueType>;
export declare class EntityBase {
    get _(): EntityRefForEntityBase<this>;
    save(): Promise<this>;
    assign(values: Partial<Omit<this, keyof EntityBase>>): this;
    delete(): Promise<void>;
    isNew(): boolean;
    get $(): FieldsRefForEntityBase<this>;
}
export declare class ControllerBase {
    protected remult: Remult;
    constructor(remult?: Remult);
    assign(values: Partial<Omit<this, keyof EntityBase>>): this;
    get $(): FieldsRefForEntityBase<this>;
    get _(): ControllerRefForControllerBase<this>;
}
declare class SubscribableImp implements Subscribable {
    reportChanged(): void;
    reportObserved(): void;
    private _subscribers?;
    subscribe(listener: (() => void) | {
        reportChanged: () => void;
        reportObserved: () => void;
    }): Unsubscribe;
}
export declare function getEntityMetadata<entityType>(entity: EntityMetadataOverloads<entityType>): EntityMetadata<entityType>;
export declare function getRepository<entityType>(entity: RepositoryOverloads<entityType>): Repository<entityType>;
export type EntityMetadataOverloads<entityType> = Repository<entityType> | EntityMetadata<entityType> | ClassType<entityType>;
export type RepositoryOverloads<entityType> = Repository<entityType> | ClassType<entityType>;
export {};
